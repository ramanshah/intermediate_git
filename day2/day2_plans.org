* Intro
** The Staging Area

Hand out copies of "Git Pretty"
http://justinhileman.info/article/git-pretty/git-pretty.png

Two sticking points in being productive with Git are understanding the staging area and the branching model; we'll work on the first of these today and the second one next time.

A lot of beginning Git courses have you do a "Hello World" commit from a tiny simple project. My experience is that in the real world, you've already hacked around some to build something a bit nontrivial (or you're taking over some long-standing project that wasn't under version control), and you have some messy project that will need a little care to put under Git properly.

The staging area is a middle ground where you prepare material for a commit. It is instrumental in incrementally bringing order to an existing legacy codebase as well as, for instance, resolving merge conflicts.

**

(1) Unzip messy project

(2) git init; git status

(3) explain .gitignore - what it's for, and how to use it. Meta issue - you'll check .gitignore into the repo. But it's the copy in the working directory that controls what Git tracks.



(4) Have students .gitignore stuff until it looks good.

git status
git ls-files --others --exclude-standard

(5) Commit with the .gitignore.

git diff
git diff --cached
git diff HEAD

Dirty

Fix a commit - open source style guidelines for commit style?


Have students vote - interested in rebasing as a day 5 on 30 July?
