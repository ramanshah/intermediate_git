* Intro to the branch model
This is sort of my favorite class. It's often said that lightweight, local branching and merging is the "killer feature" of Git. It's only a little bit of an exaggeration to say that, in software collaboration, Git *is* branching.

Note that we're still not working on GitHub - branches can be entirely local things to help you in your own work.

** Commits point to commits
pro git 3.2

In discrete math, we'd say that the set of commits forms a directed graph.

Remember, a commit points to a tree with a hash, which might point to other trees with hashes (if you have subdirectories), which eventually points to a bunch of blobs with hashes. A commit also points to a parent commit, unless it's the initial commit, which has no parent.

** Branches point to commits
pro git 3.3

A branch in Git is really just a pointer to a commit, nothing more!

** Branches can diverge
pro git 3.9: branches can diverge

 If you were maintaining two diverging "branches" of a project by hand, you'd probably need two copies of the entire project on your disk. And good luck putting in a change if it's supposed to apply to both of them.

** Merging brings them back

Show of hands - have you ever worked on something (like a senior thesis in undergrad) where you made changes, someone else like your adviser made changes, and you had two versions of the document to merge them by hand? It's a pain!

The reason Git is so helpful is that it is able to intelligently auto-merge two branches, as long as the work is unambiguously non-conflicting. We're going to see how to do this today.

pro git 3.21: Point out the merge commit, which has two parents.

In fact, because there's an initial commit at the root of a Git repo, commits would form not just a directed graph but a tree, if it weren't for these merges.

* Experimenting with branches
** Back to the Day 2 repo
Have students return to the project from Day 2 or download/decompress a snapshot of my project as of the end of Day 2.

`git status` should be clean.

** Your first branches
Have students use `git branch` to monitor the branch status while doing some branch wrangling:

git branch foo
git checkout foo
git checkout master
git branch -d foo

Have students volunteer answers to what each of these is doing.

** git checkout moves HEAD
pro git 3.5-3.6: `git checkout` switches which branch HEAD points to. Remember from Day 2 that it also takes the contents of the HEAD commit and replaces the working tree with them. In this case, we're just switching between two branches that point to the same commit, so no files are changing in the working tree. But they will if the two branches point to different things.

Remember 'detached HEAD' from Day 1? Show of hands. Well, that's when HEAD points to a bare commit, instead of when it points to a branch that in turn points to a commit.

** Hacking on a branch
In the spirit of Day 2, it's nice to know how Git frees you to experiment and make mistakes by giving you the tools to reverse mistakes. Branches are absolutely ideal for risky experimentation.

git checkout -b experiment

I can't emphasize how nice branches are for hacky experimentation: not only can you get back to what you're confident of, but you can even just leave the experiment where it is if you're uncertain if it is correct or useful. This command was my Facebook update in the late stages of my Ph.D., when there was bleeding-edge, uncertain research that was to be my final body chapter. It was a huge comfort to have a clean copy of my dissertation without that chapter in a git branch - I could sprint not only to finish that chapter but write the code and run the jobs needed to do the science without fear that the dissertation wouldn't ship.

In fact, `git checkout -b` is almost invariably the first thing I do when starting to modify a codebase.

Make a horrible mess.

rm -rf R/
git commit -a -m 'Experiment: Make a horrible mess.'

git checkout master
git branch -D experiment

Note the capital D - git will remind you about this if you try and do the lower case d.

* Working through a clean branch and merge

** Scenario #1: clean merge
In the rest of the class, we'll do two pieces of work in parallel in three different ways, like Groundhog Day. Bear with some funny commands we'll have to do at the start of Scenarios #2 and #3 - they won't be what you'd do in normal work but are just there to rewind our project to a state where we can run the three merges.

** Do work on two branches

We debug the analysis code in branch fix_math:

git checkout -b fix_math
Fix the math in square.R.
x * x
Save. Commit.

And we work on the paper in branch master:

git checkout master
Add some language to the paper.
"We make the important finding that $ x^2 = x \times x. $"
Save. Commit.

** Branches are lightweight
cat .git/refs/heads/master
cat .git/refs/heads/fix_math

The entirety of a Git branch is 41 bytes in a file, a 40-character SHA-1 hash pointing to a commit and a newline. This is unlike other kinds of version control systems, where you might have to copy the entire codebase to make a branch. They're extremely lightweight, which is often considered the killer feature of Git.

** Git plans a three-way merge
pro git 3.16-3.17

Git figures out the best common ancestor on its own and creates a "merge commit" from the three relevant snapshots. Note a key feature of our merges: we're going from two states which are both cleanly committed. By default, you can't merge two branches unless everything is a clean commit. We'll see a bit later that Git needs the working tree in case we hit a merge conflict.

** Merge our work

Merge the work from fix_math into master.

git log --oneline --graph

model that there's a caret notation that complements tilde notation and lets you go down different paths in terms of the parents of a merge commit:

git log -1 --pretty=format:%H HEAD^1
git log -1 --pretty=format:%H HEAD^2
git log -1 --pretty=format:%H HEAD^2~1

git branch -d fix_math

* Working through a merge conflict

** Scenario #2: merge conflict
Let's pretend that merge never happened.

git reset --hard HEAD~1

And that we simplified the buggy math a different way:
x ** 2

Try a merge. Point out the message.

** Panic button
git merge --abort will usually reconstruct your state just prior to the merge. In our contrived little case here, master represents a reasonable state of the project, but the fix_math version is better - using a multiply gives better performance than using the power function, which does a logarithm, multiply, and then exponential. So ideally, we'd be able to make that decision without reconstructing the work in fix_math by hand on master. Let's see how to do this.

** Fixing a merge conflict
Now we're going to actually see that Git actually modifies the stuff in our working tree when we do a merge, in an attempt to give us as much help as possible in resolving the conflict:

Open R/square.R. Give students a minute to look at it; ask students what they see in there.

You can just manually pull that new stuff out! Just use your editor to replace the conflicted stuff with what you want to see once the merge is over.

* Working through a clean rebase

** Fast-forward merges
Pro Git 3.18 - diagram of a history that permits fast-forward merges.

Before Scenario #3, I want you to appreciate what happens if a merge is completely trivial - if one branch is strictly in the past of another.

One thing that makes git logs confusing is a ton of merge commits from real three-way merges. If you did work on a branch but nothing got done on master, the merge is trivial in that you can just "fast-forward" the pointer to the more futuristic point and call it a day. Then there is no new merge commit.

Especially when contributing to open-source communities, a commit is sometimes treated like a publication - instead of a faithful chronological history of your fits, starts, and merges, you sanitize the history to be a semantically well-organized, with one completely implemented responsibility for each commit, great commit messages and no merge commits. Then the Git log is like a well-told story about the intellectual history of your product. The major tool to make your on-the-record work look cleaner is the "rebase." Rebasing is a big and flexible tool that takes you well into advanced (not intermediate) Git, but I wanted to give you a first glimpse of it so you know it exists.

(next slide)
Pro Git 3.29 - turn a branchy history into a fast-forwardy history

Scenario #3 is about how to take a real merge and turn it into something that can just be fast-forwarded.

Remember this is a question of the social standards of the community you work with: I worked at a company with twenty software engineers all working on the same repo, and we just merged our poorly conceived branches all over the place. Our codebase was growing at about 10,000 commits a year, and our log was a zoo with unhelpful commit messages and merges all over the place, but we still did just fine. Since a would-be contributor may be trying to learn about the project to the point where they can contribute from just the artifacts on GitHub, a good commit history matters in open source a lot more than in a proprietary corporate environment where you can just walk over or send a chat message to ask a question.

** Rewrite history: git rebase

It's also a dangerous tool, because like git reset and git commit --amend, it rewrites history. You can irreversibly damage your Git repo with git rebase.

Restate the Golden Rule of Git.

When in doubt, before rebasing, you can just make a copy (cp -r) of your entire repo to another directory in case everything goes horribly wrong. We'll skip that today because not too much is at stake.

** Scenario #3: clean rebase
Rewind to Scenario 1 - blow away not just our resolved merge, but also the commit we introduced to create the conflict.
